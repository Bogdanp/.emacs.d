#+TITLE:    Bogdan's EMACS Config
#+AUTHOR:   Bogdan Popa
#+EMAIL:    popa.bogdanp@gmail.com
#+LANGUAGE: en

* This Document
  The purpose of this document is mostly to help me remember all of my
  settings as well as to help newbies set up their environment and get
  started using my configuration.

* Installation
** Linux
   This depends on the distribution. Most of them will have EMACS in
   their repositories.

   #+BEGIN_SRC sh
     sudo apt-get install emacs-snapshot-gtk
   #+END_SRC

** Mac OS X
   Download and install EMACS for OS X from [[http://emacsformacosx.com][EMACS for Mac OS X]].

** Windows
   Download and install EMACS for Windows from the [[http://ftp.gnu.org.ua/gnu/emacs/windows/][GNU Repositories]].

* Setup
** Unix
   Clone the repo into your home directory and then fetch its
   submodules.

   #+BEGIN_SRC sh
     cd ~/
     git clone https://github.com/Bogdanp/.emacs.d.git
     cd .emacs.d
     git submodule init
     git submodule update
   #+END_SRC

** Windows
   Windows makes things a bit harder. Add an environment variable
   called =HOME= and make it point to =C:/Users/Username/=. Clone the
   =windows= branch of the repository in that folder and fetch its
   submodules.

* Bindings
  The most important EMACS binding is =C-g=. Use it as an escape hatch
  for when you mess up your key combinations. VIM users: =C-g= is your
  =ESC= in EMACS.

** General
   - =M-x= :: Bring up extended command mode.
   - =C-x C-c= :: Quit.
   - =C-x C-i= :: Bring up =imenu=.
   - =C-x C-e= :: Evaluate last sexp.

** Getting Help
   - =C-h f= :: Describe function.
   - =C-h v= :: Describe variable.
   - =C-h k= :: Describe key combination.

** Moving Around
   - =C-s= :: Search forward.
   - =C-p= :: Goto prev line.
   - =C-n= :: Goto next line.
   - =C-a= :: Goto beginning of line.
   - =C-e= :: Goto end of line.
   - =C-b= :: Goto prev character.
   - =C-f= :: Goto next character.
   - =M-b= :: Goto prev word.
   - =M-f= :: Goto next word.
   - =M-<= :: Goto beginning of buffer.
   - =M->= :: Goto end of buffer.
   - =C-w= :: Kill word backward.
   - =M-d= :: Kill word.

** Buffer Management
   - =C-x C-s= :: Save.
   - =C-x C-w= :: Save as.
   - =C-x C-b= :: List buffers.
   - =C-x b= :: Switch buffers.
   - =C-x f= :: Open.

** Window Management
   These suck compared to the EVIL alternatives but they (mostly =C-x
   o=) will come in handy when dealing with =<E>= buffers.

   - =C-x 0= :: Delete current window.
   - =C-x 1= :: Delete other windows.
   - =C-x 2= :: Split window vertically.
   - =C-x 3= :: Split window horizontally.
   - =C-x o= :: Goto other window.
   - =C-c M-a= :: toggle between the current window state and a
                  fullscreen terminal.

** Popups
   - =q= :: Will close most popups, make sure you are in EMACS mode
            before you use it (you're in EMACS mode if there's an
            =<E>= in your status bar).

* Paredit
  If you're writing any sort of LISP you *need* to learn Paredit. It's
  that good. Paredit allows you to perform structured editing of
  sexps. Read more about it on the [[http://www.emacswiki.org/emacs/ParEdit][EMACS Wiki]].

  *NOTE*: If you're coming from VIM Paredit will probably leave you
  frustrated (there will be times when you delete a closing paren in
  normal mode and then paredit won't allow you to insert any closing
  parens) if you don't take the time to learn it. So make sure you do.

  You can find a Paredit cheatsheet [[http://pub.gajendra.net/src/paredit-refcard.pdf][here]].

* Backups
  =undo-tree-mode= is enabled globally. All backups - including
  =undo-tree= files - are saved in =temporary-file-directory=.

* dired+
  You can bring up dired by pressing =C-j= on a folder whilst in
  =ido-find-file= (=C-x C-f=). You can also bring it up with =C-x d=.

** Bindings
   - =n= :: Goto next line.
   - =p= :: Goto prev line.
   - =+= :: Create directory.
   - =x= :: Execute changes.
   - =D= :: Delete file immediately.
   - =d= :: Mark file for deletion.
   - =g= :: Refresh buffer.
   - =m= :: Mark file.
   - =u= :: Unmark file.
   - =R= :: Rename file(s).
   - =U= :: Unmark all files.

* EVIL
** Differences From Standard EVIL
   My EVIL mode fork makes some changes to the way registers are
   handled. Most importantly, while you are inside an EVIL mode
   buffer you can only access the clipboard through the =+= register
   and nothing else, this prevents EMACS from dirtying the clipboard
   whenever you cut things.

   The copy-on-motion bug is fixed.

   =C-w= now works in the minibuffer.

** Common Bindings
   You can drop into EMACS mode for a single command using ~\~.

   - =C-z= :: Toggle between EVIL and EMACS mode.

** Normal Mode Bindings
   - =SPC= :: Bring up ace jump mode.
   - =S-SPC= :: Bring up ace char jump mode.
   - =C-w f= :: Toggle window fullscreen.

** Visual Mode Bindings
   The =C-a=, =C-e=, =C-p=, =C-n= bindings are available in visual
   mode.

** Insert Mode Bindings
   The =C-a=, =C-e=, =C-p=, =C-n= bindings are available in insert
   mode.

   - =C-w= :: Kill word backward.
   - =C-r= :: Yank from register.

* Magit
  Magit is fucking great. You can find its official manual [[http://magit.github.io/master/magit.html][here]].

** Generic Bindings
   - =n=   :: Goto next object.
   - =p=   :: Goto prev object.
   - =TAB= :: Expand/collapse object.
   - =RET= :: Open object.

** Status Bindings
   Use =C-c m= to bring =magit-status= up.

   - =S= :: Stage everything.
   - =s= :: Stage object under point.
   - =u= :: Unstage object under point.
   - =b*= :: Branch operations.
   - =c*= :: Commit operations.
   - =f*= :: Fetch operations.
   - =F*= :: Pull operations.
   - =P*= :: Push operations.

** Branch Bindings
   Use =bv= inside =magit-status= to bring up the visual branch manager.

* Org
** EMACS Bindings
*** Agenda
    -     =C-c .= :: Insert date.
    - =C-u C-c .= :: Insert date and time.

*** Buffer
    - =C-x n s= :: Narrow buffer.
    - =C-x n w= :: Widen buffer.

*** Document
    - =C-c C-e= :: Export document.

*** Headlines
    -   =TAB=  :: Expand/collapse headline.
    - =S-TAB=  :: Expand/collapse everything.
    - =C-RET=  :: Add new headline at the current level.
    - =M-RET=  :: Add new headline/list item at the current level.
    - =M-→=   :: Increase headline level.
    - =M-←=   :: Decrease headline level.
    - =S-M-→= :: Increase headline level incl. children.
    - =S-M-←= :: Decrease headline level incl. children.

*** Movement
    - =C-c C-u= :: Goto parent headline.
    - =C-c C-b= :: Prev same-level headline.
    - =C-c C-f= :: Next same-level headline.
    - =C-c C-p= :: Prev headline.
    - =C-c C-n= :: Next headline.

*** Source Code
    - =C-c=' :: Open up the code in a source code block in a separate
                buffer for editing.
    - =<sTAB= :: Insert source code block. You need to be in insert or
                 EMACS mode to use this one.
     
** EVIL Bindings
*** Agenda
    - , =a= :: Bring up agenda (this one is globally-available).

*** Headlines
    - , =t= :: Toggle headline state.

    - =-= :: Cycle list bullet.
    - =<= :: Decrease headline level.
    - =>= :: Increase headline level.

*** Movement
    - =gu= :: Goto parent headline.
    - =gj= :: Goto next same-level headline.
    - =gk= :: Goto prev same-level headline.

* Prodigy
  Prodigy is bound to =C-c p=.

** Services
   Services should be defined in =config/init-prodigy.el=. The
   following is an example service:

   #+BEGIN_SRC elisp -n -r
     (prodigy-define-service
       :name "Python Server"
       :command "python"
       :args '("-m" "SimpleHTTPServer" "8093")
       :cwd "/path/to/my/project/"
       :tags '(example)
       :kill-process-buffer-on-stop t)
   #+END_SRC

** Bindings
   - =n= :: Next process.
   - =p= :: Prev process.
   - =s= :: Start process.
   - =S= :: Stop process.
   - =r= :: Restart process.
   - =$= :: View process log.
   - =F= :: Clear filters.
   - =f t= :: Filter by tag.
   - =f n= :: Filter by name.
   - =j d= :: Open dired for the current process.
   - =j m= :: Open magit for the current process.

* Haskell
  You will need a recent version of =ghc= and =cabal= as well as the
  following packages: =hlint=, =ghc-mod=, =ghci-ng=,
  =structured-haskell-mode=, =stylish-haskell=.

** Structured Haskell Mode
   See the [[https://github.com/chrisdone/structured-haskell-mode][Official Repository]].

** Bindings
   - =C-c C-l= :: Load the buffer into a REPL.
   - =C-c C-t= :: View type of object at point.

* PHP
  PHP is supported through =php-mode= and =web-mode=. Use =web-mode=
  for mixed HTML and PHP files and =php-mode= for pure PHP files. The
  default mode for PHP files is =web-mode=.

** Flycheck
   Install =phpcs= from PEAR and you should be good to go.

* Python
** Flycheck
   Install =flake8= to use it as a backend for Flycheck.

*** Ignoring Certain Errors
    Create a =.flake8rc= file in your =HOME= directory. For example:

    #+NAME: .flake8rc
    #+BEGIN_SRC conf -n -r
      [flake8]
      ignore = E501,F403,E712
    #+END_SRC

*** Bindings
    - =C-c !n= :: Goto next error.
    - =C-c !p= :: Goto prev error.
    - =C-c !l= :: List errors.

** Jedi
   Install =virtualenv= and =epc= and then run =M-x jedi:install-server=.

*** Bindings
    - =C-c .= :: Goto definition (and =C-c= ,).
    - =C-c ?= :: Show documentation of the object at point.

* Scala
  View the ENSIME manual at the [[https://github.com/ensime/ensime-src][Official Repository]]. Start up ENSIME
  in a Scala buffer with =M-x ensime RET=.

* Scheme
** Setup
   Link =mzscheme= and =racket= so that they can be found in =PATH=.

** Geiser mode
   Start it up with =M-x run-geiser=.

*** Buffer Bindings
    - =C-c C-a= :: Switch to the REPL and enter the current module.
    - =C-c C-z= :: Switch between the buffer and the REPL.
    - =C-M-x= :: Eval definition around point.
    - =C-c M-e= :: Eval definition around point and switch to REPL.
    - =C-c C-x= :: Eval sexp before point.
    - =C-c C-r= :: Eval region (also =C-c M-r=).
    - =C-c C-b= :: Eval buffer (also =C-c M-b=).
    - =M-g n= :: Jump to next error.
    - =M-g p= :: Jump to prev error.

*** REPL Bindings
    - =C-c C-q= :: Kill Scheme process.
    - =C-c M-o= :: Clear REPL.
